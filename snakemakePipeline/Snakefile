#!/usr/bin/env python

# An Automated Pipeline to Transcriptome Assembly and Quality Assessment
#
# Author: Felipe Vaz Peres
#
# Preparation:
# 1) Setup 'config.yaml' file  with softwares path
# 2) Create 'samples_{genotype}.csv' file and add SRA identifiers (e.g SRR5258954,SRR5258955,SRR5258994,SRR5258995)
# 3) Create 'parts.csv' file and add the value of parts you want the kraken file to be split (e.g 00,01,02 for 3 equal parts)
# 4) Setup 'GENOTYPE' variable with the genotype name (e.g GENOTYPE=QN05-1509)
#
# Usage (remove the -n to dont show dry-run and start the jobs):
# 1) Load modules: BUSCO/3.0; transrate/1.0.3
# 2) Run the following command:
# snakemake -np -s Snakefile \
# --cluster "qsub -q all.q -V -cwd -l h={params.server} -pe smp {threads} -l mem_free={resources.mem_free}G" \
# --jobs 10
#
# Build DAG:
#
# snakemake -s Snakefile --dag | dot -Tsvg > dag.svg

configfile: "config.yaml"

import pandas as pd
import yaml

samples = pd.read_csv("samples_Q200.csv")
parts = pd.read_csv("parts.csv")
GENOTYPE="Q200"

#Software executable
fastq_dump = config["software"]["fastq-dump"]
fastqc = config["software"]["fastqc"]
bbduk = config["software"]["bbduk"]
kraken2 = config["software"]["kraken2"]
create_index = config["software"]["create_index"]
contfree_ngs = config["software"]["contfree_ngs"]
trinity = config["software"]["trinity"]
cd_hit_est = config["software"]["cd_hit_est"]
extract_contigs = config["software"]["extract_contigs"]
busco = config["software"]["busco"]
transrate = config["software"]["transrate"]
salmon = config["software"]["salmon"]

rule all:
	input:
		#Getting only total parts before run Trinity:
		expand("MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.filtered.total.R1.fastq", genotype=GENOTYPE, sample=samples),
		expand("MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.filtered.total.R2.fastq", genotype=GENOTYPE, sample=samples),
		expand("MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.unclassified.total.R1.fastq", genotype=GENOTYPE, sample=samples),
		expand("MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.unclassified.total.R2.fastq", genotype=GENOTYPE, sample=samples),
		expand("MyAssembly_{genotype}_k25andk31_busco", genotype=GENOTYPE),
		expand("MyAssembly_{genotype}/9_transrate/transrate_comparative_Shorgum_vs_{genotype}", genotype=GENOTYPE),
		expand("MyAssembly_{genotype}/10_salmon/quant/", genotype=GENOTYPE)
		
rule download_fastq:
	output:
		R1 = "MyAssembly_{genotype}/1_raw_reads_in_fastq_format/{sample}_1.fastq",
		R2 = "MyAssembly_{genotype}/1_raw_reads_in_fastq_format/{sample}_2.fastq"
	threads: 1
	resources:
		mem_free=1
	params:
		genotype="{genotype}",
		server="figsrv"
	log:
		"MyAssembly_{genotype}/logs/download_fastq/{sample}.log"
	shell:
		"{fastq_dump} --defline-seq '@$sn[_$rn]/$ri' --split-files {wildcards.sample} -O MyAssembly_{params.genotype}/1_raw_reads_in_fastq_format 2> {log}"

rule fastqc:
	input:
                R1 = "MyAssembly_{genotype}/1_raw_reads_in_fastq_format/{sample}_1.fastq",
                R2 = "MyAssembly_{genotype}/1_raw_reads_in_fastq_format/{sample}_2.fastq" 
	output:
		html_1= "MyAssembly_{genotype}/2_raw_reads_fastqc_reports/{sample}_1_fastqc.html",
		zip_1 = "MyAssembly_{genotype}/2_raw_reads_fastqc_reports/{sample}_1_fastqc.zip",
                html_2= "MyAssembly_{genotype}/2_raw_reads_fastqc_reports/{sample}_2_fastqc.html",
                zip_2 = "MyAssembly_{genotype}/2_raw_reads_fastqc_reports/{sample}_2_fastqc.zip"
	threads: 1
	resources: 
		mem_free=1
	params:
		genotype="{genotype}",
		server="figsrv"
	log:
		"MyAssembly_{genotype}/logs/fastqc/{sample}.log"
	shell:
		"{fastqc} -f fastq {input.R1} -o MyAssembly_{params.genotype}/2_raw_reads_fastqc_reports 2> {log};"
		"{fastqc} -f fastq {input.R2} -o MyAssembly_{params.genotype}/2_raw_reads_fastqc_reports 2> {log}"

rule bbduk:
	input:
		"MyAssembly_{genotype}/2_raw_reads_fastqc_reports/{sample}_1_fastqc.html",
		R1 = "MyAssembly_{genotype}/1_raw_reads_in_fastq_format/{sample}_1.fastq",
		R2 = "MyAssembly_{genotype}/1_raw_reads_in_fastq_format/{sample}_2.fastq"
	output:
		R1 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R1.fastq",
		R2 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R2.fastq",
		refstats = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.refstats",
		stats = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.stats"
	log:
		"MyAssembly_{genotype}/logs/bbduk/{sample}.log"
	threads: 4
	resources:
		mem_free=1
	params:
		server="figsrv"
	shell:
		"{bbduk} -Xmx40g threads={threads} in1={input.R1} in2={input.R2} "
		"refstats={output.refstats} stats={output.stats} "
		"out1={output.R1} out2={output.R2} "
		"rref=/Storage/progs/bbmap_35.85/resources/adapters.fa "
		"fref=/Storage/progs/sortmerna-2.1b/rRNA_databases/rfam-5.8s-database-id98.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/silva-bac-16s-id90.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/rfam-5s-database-id98.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/silva-bac-23s-id98.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/silva-arc-16s-id95.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/silva-euk-18s-id95.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/silva-arc-23s-id98.fasta,"
		"/Storage/progs/sortmerna-2.1b/rRNA_databases/silva-euk-28s-id98.fasta "
		"minlength=75 qtrim=w trimq=20 tpe tbo 2> {log}"

rule fastqc_after_bbduk:
	input:
		R1 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R1.fastq",
		R2 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R2.fastq"
	output:
		html_1= "MyAssembly_{genotype}/4_trimmed_reads_fastqc_reports/{sample}.trimmed.R1_fastqc.html",
		zip_1 = "MyAssembly_{genotype}/4_trimmed_reads_fastqc_reports/{sample}.trimmed.R1_fastqc.zip",
		html_2= "MyAssembly_{genotype}/4_trimmed_reads_fastqc_reports/{sample}.trimmed.R2_fastqc.html",
		zip_2 = "MyAssembly_{genotype}/4_trimmed_reads_fastqc_reports/{sample}.trimmed.R2_fastqc.zip"
	threads: 1
	resources:
		mem_free=1
	params:
		genotype="{genotype}",
		server="figsrv"
	log:
		"MyAssembly_{genotype}/logs/fastqc_after_bbduk/{sample}.log"
	shell:
		"{fastqc} -f fastq {input.R1} -o MyAssembly_{params.genotype}/4_trimmed_reads_fastqc_reports 2> {log};"
		"{fastqc} -f fastq {input.R2} -o MyAssembly_{params.genotype}/4_trimmed_reads_fastqc_reports 2> {log}"

rule kraken:
	input:
		"MyAssembly_{genotype}/4_trimmed_reads_fastqc_reports/{sample}.trimmed.R1_fastqc.html",
		R1 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R1.fastq",
		R2 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R2.fastq"
	output:
		"MyAssembly_{genotype}/5_trimmed_reads_kraken_reports/{sample}.trimmed.kraken"
	threads: 10
	resources:
		mem_free=255
	params:
		server="figsrv"
	log:
		"MyAssembly_{genotype}/logs/kraken2/{sample}.log"
	shell:
		"{kraken2} --db /Storage/data1/felipe.peres/kraken2/completeDB "
		"--threads {threads} --report-zero-counts --confidence 0.05 --output {output} --paired {input.R1} {input.R2} 2> {log}"

rule split_kraken_output:
	input:
		"MyAssembly_{genotype}/5_trimmed_reads_kraken_reports/{sample}.trimmed.kraken"
	output:
		expand("MyAssembly_{{genotype}}/5_trimmed_reads_kraken_reports/parts/{{sample}}.trimmed_{part}.kraken", part=parts)
	params:
		identificator = "{sample}",
		genotype = "{genotype}",
		server = "figsrv"
	threads: 1
	resources: 
		mem_free=1
	log:
		"MyAssembly_{genotype}/logs/split_kraken_output/{sample}.log"
	shell:
		"split --number=l/10 -d --additional-suffix=.kraken {input} MyAssembly_{params.genotype}/5_trimmed_reads_kraken_reports/parts/{params.identificator}.trimmed_ 2> {log}"

rule create_index_contfree_ngs:
	input: 
		R1 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R1.fastq",
		R2 = "MyAssembly_{genotype}/3_trimmed_reads/{sample}.trimmed.R2.fastq"
	output:
		R1 = "MyAssembly_{genotype}/6_contamination_removal/index/{sample}.trimmed.R1.index",
		R2 = "MyAssembly_{genotype}/6_contamination_removal/index/{sample}.trimmed.R2.index"
	threads: 1
	resources:
		mem_free=1
	params:
		genotype="{genotype}",
		server="bcmsrv"
	log:
		"MyAssembly_{genotype}/logs/create_index/{sample}.log"
	shell:
		"{create_index} -R1 {input.R1} -R2 {input.R2} -o MyAssembly_{params.genotype}/6_contamination_removal/index/ 2> {log}"

rule contfree_ngs:
	input:
		R1 = "MyAssembly_{genotype}/6_contamination_removal/index/{sample}.trimmed.R1.index",
		R2 = "MyAssembly_{genotype}/6_contamination_removal/index/{sample}.trimmed.R2.index",
		kraken_file = "MyAssembly_{genotype}/5_trimmed_reads_kraken_reports/parts/{sample}.trimmed_{part}.kraken"
	output: 
		filtered_parts_R1 = "MyAssembly_{genotype}/6_contamination_removal/parts/{part}.{sample}.trimmed.filtered.R1.fastq", 
		filtered_parts_R2 = "MyAssembly_{genotype}/6_contamination_removal/parts/{part}.{sample}.trimmed.filtered.R2.fastq", 
		unclassified_parts_R1 = "MyAssembly_{genotype}/6_contamination_removal/parts/{part}.{sample}.trimmed.unclassified.R1.fastq",
		unclassified_parts_R2 = "MyAssembly_{genotype}/6_contamination_removal/parts/{part}.{sample}.trimmed.unclassified.R2.fastq"
	threads: 1
	resources: 
		mem_free=1
	params:
		genotype="{genotype}",
		server="bcmsrv"
	log:
		"MyAssembly_{genotype}/logs/contfree_ngs/{sample}.{part}.log"
	shell:
		"python3.8 {contfree_ngs} --taxonomy {input.kraken_file} --s p --R1 {input.R1} --R2 {input.R2} --taxon Viridiplantae -o MyAssembly_{params.genotype}/6_contamination_removal/parts/ 2> {log};"

rule merge:
	input:
		filtered_parts_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/parts/{part}.{{sample}}.trimmed.filtered.R1.fastq", part=parts),
		filtered_parts_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/parts/{part}.{{sample}}.trimmed.filtered.R2.fastq", part=parts),
		unclassified_parts_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/parts/{part}.{{sample}}.trimmed.unclassified.R1.fastq", part=parts),
		unclassified_parts_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/parts/{part}.{{sample}}.trimmed.unclassified.R2.fastq", part=parts)
	output:
		filtered_total_R1 = "MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.filtered.total.R1.fastq",
		filtered_total_R2 = "MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.filtered.total.R2.fastq",
		unclassified_total_R1 = "MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.unclassified.total.R1.fastq",
		unclassified_total_R2 = "MyAssembly_{genotype}/6_contamination_removal/{sample}.trimmed.unclassified.total.R2.fastq"
	threads: 1
	resources:
		mem_free=1
	params:
		server="figsrv"
	log:
		"MyAssembly_{genotype}/logs/merge/{sample}.log"
	shell:
		"cat {input.filtered_parts_R1} >> {output.filtered_total_R1};"
		"cat {input.filtered_parts_R2} >> {output.filtered_total_R2};"
		"cat {input.unclassified_parts_R1} >> {output.unclassified_total_R1};"
		"cat {input.unclassified_parts_R2} >> {output.unclassified_total_R2}"

filtered_total_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.filtered.total.R1.fastq", sample=samples)
filtered_total_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.filtered.total.R2.fastq", sample=samples)
unclassified_total_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.unclassified.total.R1.fastq", sample=samples)
unclassified_total_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.unclassified.total.R2.fastq", sample=samples)

'''
rule trinity:
	input:
		filtered_total_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.filtered.total.R1.fastq", sample=samples),
		filtered_total_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.filtered.total.R2.fastq", sample=samples),
		unclassified_total_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.unclassified.total.R1.fastq", sample=samples),
		unclassified_total_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.unclassified.total.R2.fastq", sample=samples) 
	output: 
		k25 = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25.Trinity.fasta",
		k31 = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k31.Trinity.fasta"
	params:
		filtered_total_R1=','.join(filtered_total_R1),
		filtered_total_R2=','.join(filtered_total_R2),
		unclassified_total_R1=','.join(unclassified_total_R1),
		unclassified_total_R2=','.join(unclassified_total_R2),
		server="figsrv",
		genotype="{genotype}"
	resources: 
		mem_free=100
	threads: 10
	log:
		k25 = "MyAssembly_{genotype}/logs/trinity/{genotype}.k25.log",
		k31 = "MyAssembly_{genotype}/logs/trinity/{genotype}.k31.log"
	shell:
		"/usr/bin/time -v {trinity} --seqType fq --left {params.filtered_total_R1},{params.unclassified_total_R1} --right {params.filtered_total_R2},{params.unclassified_total_R2} --SS_lib_type RF --max_memory 10G --min_contig_length 200 --CPU {threads} --output 7_trinity_assembly/MyAssembly_{params.genotype}_trinity_k25 --full_cleanup --no_normalize_reads --KMER_SIZE 25 2> {log.k25};"
		"/usr/bin/time -v {trinity} --seqType fq --left {params.filtered_total_R1},{params.unclassified_total_R1} --right {params.filtered_total_R2},{params.unclassified_total_R2} --SS_lib_type RF --max_memory 10G --min_contig_length 200 --CPU {threads} --output 7_trinity_assembly/MyAssembly_{params.genotype}_trinity_k25 --full_cleanup --no_normalize_reads --KMER_SIZE 31 2> {log.k31}"

rule cd_hit_est:
	input: 
		k25 = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25.Trinity.fasta",
		k31 = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k31.Trinity.fasta"
	output:
		mod_k25 = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25.Trinity.mod.fasta",
		mod_k31 = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k31.Trinity.mod.fasta",
		merged_mod = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.mod.fasta",
		final_cd_hit_est = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.final.fasta"
	params:
		genotype="{genotype}",
		server="figsrv"
	threads: 1
	log:
		"MyAssembly_{genotype}/logs/cd_hit_est_transcriptomes/{genotype}.log"
	shell:
		"sed 's/>/>k25_{params.genotype}_/' {input.k25} > {output.mod_k25};"
		"sed 's/>/>k31_{params.genotype}_/' {input.k31} > {output.mod_k31};"
		"cat {output.mod_k25} {output.mod_k31} > {output.merged_mod};"
		"/usr/bin/time -v {cd_hit_est} -i {output.merged_mod} -o {output.final_cd_hit_est} -c 1 -n 11 -T {threads} -M 0 -d 0 -r 0 -g 1"

rule extract_contiglenght_301:
	input:
		transcriptome = "MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.final.fasta"
	output: 
		"MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.final_gt301bp.fasta"
	params:
		server="figsrv"
	threads: 1
	log: 
		"MyAssembly_{genotype}/logs/extract_contigs/{genotype}.log"
	shell:
		"{extract_contigs} -f {input.transcriptome} -m 301 2> {log}"
'''

rule busco:
	input:
		transcriptome="MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.final_gt301bp.fasta"
	output:
		busco="MyAssembly_{genotype}_k25andk31_busco"
	params:
		server="figsrv"
	resources:
		mem_free=1
	threads: 2
	log:
		"MyAssembly_{genotype}/logs/busco/{genotype}.log"
	shell:
		"/usr/bin/time -v run_BUSCO.py -i {input.transcriptome} -o {output.busco} -c {threads} -m transcriptome -l /Storage/databases/BUSCO_DBs/embryophyta_odb9/ 2> {log}"		

rule transrate:
	input:
		transcriptome="MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.final_gt301bp.fasta",
		ref="Sbicolor_454_v3.1.1.transcript.fa"
	output:
		transrate=directory("MyAssembly_{genotype}/9_transrate/transrate_comparative_Shorgum_vs_{genotype}")
	params:
		server="figsrv"
	resources:
		mem_free=1
	threads: 2
	log:
		"MyAssembly_{genotype}/logs/transrate/{genotype}.log"
	shell:
		"/usr/bin/time -v {transrate} --assembly {input.transcriptome} --reference {input.ref} --threads {threads} --output {output.transrate} 2> {log}"
rule salmon_index:
	input:
		transcriptome="MyAssembly_{genotype}/7_trinity_assembly/MyAssembly_{genotype}_trinity_k25_and_k31.Trinity.merged.final_gt301bp.fasta"
	output:
		salmon_index=directory("MyAssembly_{genotype}/10_salmon/index/")
	params:
		server="figsrv"
	resources:
		mem_free=1
	threads: 2
	log:
		"MyAssembly_{genotype}/logs/salmon_index/{genotype}.log"
	shell:
		"/usr/bin/time -v {salmon} index -t {input.transcriptome} -p {threads} -i {output.salmon_index} --gencode 2> {log}"

rule salmon_quant:
	input:
		salmon_index = "MyAssembly_{genotype}/10_salmon/index/",
		filtered_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.filtered.total.R1.fastq", sample=samples),
                filtered_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.filtered.total.R2.fastq", sample=samples),
                unclassified_R1 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.unclassified.total.R1.fastq", sample=samples),
                unclassified_R2 = expand("MyAssembly_{{genotype}}/6_contamination_removal/{sample}.trimmed.unclassified.total.R2.fastq", sample=samples)
	output:
		salmon_quant=directory("MyAssembly_{genotype}/10_salmon/quant/")
	params:
		server="figsrv",
		filtered_total_R1=' '.join(filtered_total_R1),
		filtered_total_R2=' '.join(filtered_total_R2),
		unclassified_total_R1=' '.join(unclassified_total_R1),
		unclassified_total_R2=' '.join(unclassified_total_R2)
	resources:
		mem_free=1
	threads: 2
	log: 
		"MyAssembly_{genotype}/logs/salmon_quant/{genotype}.log"
	shell:
		"/usr/bin/time -v {salmon} quant -i {input.salmon_index} -l A -1 {params.filtered_total_R1} {params.unclassified_total_R1} -2 {params.filtered_total_R2} {params.unclassified_total_R2} --validateMappings -o {output.salmon_quant} 2> {log}"
